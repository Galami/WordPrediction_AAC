[
  {
    "op": "core/row-reorder",
    "description": "Reorder rows",
    "mode": "record-based",
    "sorting": {
      "criteria": [
        {
          "errorPosition": 1,
          "caseSensitive": false,
          "valueType": "string",
          "column": "Column 1",
          "blankPosition": 2,
          "reverse": false
        }
      ]
    }
  },
  {
    "op": "core/blank-down",
    "description": "Blank down cells in column Column 1",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "Column 1"
  },
  {
    "op": "core/multivalued-cell-join",
    "description": "Join multi-valued cells in column Column 2",
    "columnName": "Column 2",
    "keyColumnName": "Column 1",
    "separator": ", "
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Column 2 using expression grel:sum(forEach(value.split(','),x, x.toNumber()))",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "Column 2",
    "expression": "grel:sum(forEach(value.split(','),x, x.toNumber()))",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
  {
    "op": "core/column-split",
    "description": "Split column Column 1 by separator",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "Column 1",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "\\s",
    "regex": true,
    "maxColumns": 2
  }
]